rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Fonctions helper pour la sécurité
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isEmailVerified() {
      return isAuthenticated() && request.auth.token.email_verified == true;
    }

    function isValidTimestamp(ts) {
      return ts is timestamp && 
             ts <= request.time && 
             ts >= request.time - duration.value(300, 's');
    }

    function calculateBackoff(attempts) {
      return duration.value(5 * Math.pow(2, attempts), 's');
    }

    function hasNotExceededRateLimit(attempts) {
      let cooldownPeriod = calculateBackoff(attempts);
      return request.time > resource.data.lastAttempt + cooldownPeriod;
    }

    function isValidEmail(email) {
      return email.matches('^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$');
    }

    function isValidWalletAddress(address) {
      return address.matches('^0x[a-fA-F0-9]{40}$');
    }

    function isLocalhost() {
      return request.auth.token.firebase.sign_in_provider == 'custom' &&
             request.auth.token.email == 'localhost@tokenforge.local';
    }

    // Règles pour la collection userAttempts (rate limiting)
    match /userAttempts/{userId} {
      allow read: if isOwner(userId) || isLocalhost();
      allow create: if (isAuthenticated() || isLocalhost()) &&
                   request.resource.data.keys().hasAll(['attempts', 'lastAttempt']) &&
                   request.resource.data.attempts == 1;
      allow update: if (isOwner(userId) || isLocalhost()) && 
                   hasNotExceededRateLimit(resource.data.attempts) &&
                   request.resource.data.attempts == resource.data.attempts + 1;
    }

    // Règles pour la collection users
    match /users/{userId} {
      allow read: if isOwner(userId) || isLocalhost();
      allow create: if (isAuthenticated() || isLocalhost()) && 
                   request.auth.uid == userId &&
                   request.resource.data.keys().hasAll(['email', 'createdAt', 'lastLogin']) &&
                   (isValidEmail(request.resource.data.email) || isLocalhost()) &&
                   request.resource.data.email == request.auth.token.email;
      allow update: if (isOwner(userId) || isLocalhost()) && 
                   (!request.resource.data.diff(resource.data).affectedKeys()
                     .hasAny(['email', 'createdAt'])) &&
                   isValidTimestamp(request.resource.data.lastLogin);
      allow delete: if false;
    }

    // Règles pour la collection sessions
    match /sessions/{sessionId} {
      allow read: if isOwner(resource.data.userId) || isLocalhost();
      allow create: if (isAuthenticated() || isLocalhost()) &&
                   request.resource.data.userId == request.auth.uid &&
                   isValidTimestamp(request.resource.data.createdAt) &&
                   request.resource.data.expiresAt > request.time;
      allow update: if (isOwner(resource.data.userId) || isLocalhost()) &&
                   isValidTimestamp(request.resource.data.lastActivity);
      allow delete: if isOwner(resource.data.userId) || isLocalhost();
    }

    // Règles pour la collection wallets
    match /wallets/{walletId} {
      allow read: if isOwner(resource.data.userId) || isLocalhost();
      allow create: if (isAuthenticated() || isLocalhost()) &&
                   isEmailVerified() &&
                   request.resource.data.userId == request.auth.uid &&
                   isValidWalletAddress(request.resource.data.address) &&
                   isValidTimestamp(request.resource.data.createdAt);
      allow update: if (isOwner(resource.data.userId) || isLocalhost()) &&
                   !request.resource.data.diff(resource.data).affectedKeys().hasAny(['address', 'createdAt']);
      allow delete: if false;
    }

    // Règles pour la collection moonpayTransactions
    match /moonpayTransactions/{transactionId} {
      allow read: if (isOwner(resource.data.userId) || isLocalhost()) && isEmailVerified();
      allow create: if (isAuthenticated() || isLocalhost()) &&
                   isEmailVerified() &&
                   request.resource.data.userId == request.auth.uid &&
                   isValidTimestamp(request.resource.data.createdAt) &&
                   hasNotExceededRateLimit(getAfter(/databases/$(database)/documents/userAttempts/$(request.auth.uid)).data.attempts);
      allow update: if (isAuthenticated() || isLocalhost()) && (
        isOwner(resource.data.userId) || 
        request.auth.token.firebase.sign_in_provider == 'cloud-function'
      ) && isEmailVerified();
      allow delete: if false;
    }

    // Règles pour la collection cspViolations
    match /cspViolations/{violationId} {
      allow read: if request.auth != null && 
                 request.auth.token.admin == true;
      allow create: if true; // Permettre les rapports anonymes
      allow update, delete: if false;
    }
  }
}
