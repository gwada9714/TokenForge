/**
 * Test manuel pour v√©rifier l'initialisation et le fonctionnement des services Firebase Auth
 * 
 * Ce fichier contient des fonctions de test qui peuvent √™tre ex√©cut√©es manuellement
 * pour v√©rifier que les services Firebase sont correctement initialis√©s et fonctionnent
 * comme pr√©vu.
 */

import { getFirebaseManager } from '../services';
import { firebaseAuth } from '../auth';
import { logger } from '@/core/logger';

const LOG_CATEGORY = 'AuthTest';

/**
 * V√©rifie l'initialisation compl√®te des services Firebase
 */
export async function testFirebaseInitialization() {
  try {
    logger.info({
      category: LOG_CATEGORY,
      message: 'üß™ D√©marrage du test d\'initialisation Firebase'
    });

    // 1. V√©rifier l'initialisation du FirebaseManager
    const firebaseManager = await getFirebaseManager();
    logger.info({
      category: LOG_CATEGORY,
      message: '‚úÖ FirebaseManager correctement initialis√©'
    });

    // 2. V√©rifier l'initialisation explicite d'Auth
    const auth = await firebaseManager.initAuth();
    logger.info({
      category: LOG_CATEGORY,
      message: '‚úÖ Firebase Auth correctement initialis√© via FirebaseManager',
      data: {
        authInitialized: !!auth
      }
    });

    // 3. V√©rifier le service d'authentification
    const authService = await firebaseAuth.getAuth();
    logger.info({
      category: LOG_CATEGORY,
      message: '‚úÖ Service d\'authentification correctement initialis√©',
      data: {
        authServiceInitialized: !!authService
      }
    });

    // 4. V√©rifier l'√©tat de l'utilisateur actuel
    const currentUser = authService.currentUser;
    logger.info({
      category: LOG_CATEGORY,
      message: currentUser 
        ? 'üë§ Utilisateur actuellement connect√©'
        : 'üë§ Aucun utilisateur connect√©',
      data: {
        uid: currentUser?.uid,
        email: currentUser?.email,
        isAnonymous: currentUser?.isAnonymous
      }
    });

    logger.info({
      category: LOG_CATEGORY,
      message: 'üéâ Test d\'initialisation Firebase r√©ussi'
    });

    return {
      success: true,
      firebaseManager,
      auth,
      authService,
      currentUser
    };
  } catch (error) {
    logger.error({
      category: LOG_CATEGORY,
      message: '‚ùå √âchec du test d\'initialisation Firebase',
      error: error instanceof Error ? error : new Error(String(error))
    });

    return {
      success: false,
      error
    };
  }
}

/**
 * Teste la connexion anonyme
 */
export async function testAnonymousSignIn() {
  try {
    logger.info({
      category: LOG_CATEGORY,
      message: 'üß™ D√©marrage du test de connexion anonyme'
    });

    const auth = await firebaseAuth.getAuth();
    
    // D√©connexion pr√©alable si n√©cessaire
    if (auth.currentUser) {
      await auth.signOut();
      logger.info({
        category: LOG_CATEGORY,
        message: 'üö™ D√©connexion de l\'utilisateur actuel effectu√©e'
      });
    }

    // Connexion anonyme
    const userCredential = await auth.signInAnonymously();
    const user = userCredential.user;

    logger.info({
      category: LOG_CATEGORY,
      message: '‚úÖ Connexion anonyme r√©ussie',
      data: {
        uid: user.uid,
        isAnonymous: user.isAnonymous
      }
    });

    return {
      success: true,
      user
    };
  } catch (error) {
    logger.error({
      category: LOG_CATEGORY,
      message: '‚ùå √âchec de la connexion anonyme',
      error: error instanceof Error ? error : new Error(String(error))
    });

    return {
      success: false,
      error
    };
  }
}

/**
 * Teste la d√©connexion
 */
export async function testSignOut() {
  try {
    logger.info({
      category: LOG_CATEGORY,
      message: 'üß™ D√©marrage du test de d√©connexion'
    });

    const auth = await firebaseAuth.getAuth();
    
    if (!auth.currentUser) {
      logger.info({
        category: LOG_CATEGORY,
        message: '‚ö†Ô∏è Aucun utilisateur connect√©, impossible de tester la d√©connexion'
      });
      return {
        success: false,
        reason: 'no-user-signed-in'
      };
    }

    // D√©connexion
    await auth.signOut();
    
    logger.info({
      category: LOG_CATEGORY,
      message: '‚úÖ D√©connexion r√©ussie'
    });

    return {
      success: true
    };
  } catch (error) {
    logger.error({
      category: LOG_CATEGORY,
      message: '‚ùå √âchec de la d√©connexion',
      error: error instanceof Error ? error : new Error(String(error))
    });

    return {
      success: false,
      error
    };
  }
}

// Export des fonctions de test
export const AuthTest = {
  testFirebaseInitialization,
  testAnonymousSignIn,
  testSignOut
};

export default AuthTest;
