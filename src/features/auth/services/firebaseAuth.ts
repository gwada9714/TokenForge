import {
  signInWithEmailAndPassword,
  signOut,
  createUserWithEmailAndPassword,
  sendEmailVerification,
  sendPasswordResetEmail,
  updateProfile,
  updatePassword,
  User,
  UserCredential,
  Auth
} from 'firebase/auth';
import { getFirebaseAuth } from '@/lib/firebase';
import { logger } from '@/utils/firebase-logger';

const LOG_CATEGORY = 'FirebaseAuth';

export class FirebaseAuth {
  private static instance: FirebaseAuth;
  private _auth: Auth | null = null;

  private constructor() {}

  public static getInstance(): FirebaseAuth {
    if (!FirebaseAuth.instance) {
      FirebaseAuth.instance = new FirebaseAuth();
    }
    return FirebaseAuth.instance;
  }

  public async initialize(): Promise<void> {
    try {
      logger.debug(LOG_CATEGORY, { message: 'üîÑ Initialisation de Firebase Auth' });
      this._auth = await getFirebaseAuth();
      logger.info(LOG_CATEGORY, { message: '‚úÖ Firebase Auth initialis√©' });
    } catch (error) {
      logger.error(LOG_CATEGORY, { message: '‚ùå Erreur lors de l\'initialisation de Firebase Auth', error });
      throw error;
    }
  }

  private get auth(): Auth {
    if (!this._auth) {
      throw new Error('Firebase Auth n\'est pas encore initialis√©');
    }
    return this._auth;
  }

  public async signIn(email: string, password: string): Promise<UserCredential> {
    try {
      logger.debug(LOG_CATEGORY, { message: 'üîê Tentative de connexion', email });
      const result = await signInWithEmailAndPassword(this.auth, email, password);
      logger.info(LOG_CATEGORY, { message: '‚úÖ Connexion r√©ussie', email });
      return result;
    } catch (error) {
      logger.error(LOG_CATEGORY, { message: '‚ùå Erreur lors de la connexion', email, error });
      throw error;
    }
  }

  public async signOut(): Promise<void> {
    try {
      logger.debug(LOG_CATEGORY, { message: 'üö™ D√©connexion' });
      await signOut(this.auth);
      logger.info(LOG_CATEGORY, { message: '‚úÖ D√©connexion r√©ussie' });
    } catch (error) {
      logger.error(LOG_CATEGORY, { message: '‚ùå Erreur lors de la d√©connexion', error });
      throw error;
    }
  }

  public async createUser(email: string, password: string): Promise<UserCredential> {
    try {
      logger.debug(LOG_CATEGORY, { message: 'üë§ Cr√©ation d\'un nouvel utilisateur', email });
      const result = await createUserWithEmailAndPassword(this.auth, email, password);
      logger.info(LOG_CATEGORY, { message: '‚úÖ Utilisateur cr√©√© avec succ√®s', email });
      return result;
    } catch (error) {
      logger.error(LOG_CATEGORY, { message: '‚ùå Erreur lors de la cr√©ation de l\'utilisateur', email, error });
      throw error;
    }
  }

  public async sendVerificationEmail(user: User): Promise<void> {
    try {
      logger.debug(LOG_CATEGORY, { message: 'üìß Envoi de l\'email de v√©rification', email: user.email });
      await sendEmailVerification(user);
      logger.info(LOG_CATEGORY, { message: '‚úÖ Email de v√©rification envoy√©', email: user.email });
    } catch (error) {
      logger.error(LOG_CATEGORY, { message: '‚ùå Erreur lors de l\'envoi de l\'email de v√©rification', email: user.email, error });
      throw error;
    }
  }

  public async resetPassword(email: string): Promise<void> {
    try {
      logger.debug(LOG_CATEGORY, { message: 'üîë Demande de r√©initialisation du mot de passe', email });
      await sendPasswordResetEmail(this.auth, email);
      logger.info(LOG_CATEGORY, { message: '‚úÖ Email de r√©initialisation envoy√©', email });
    } catch (error) {
      logger.error(LOG_CATEGORY, { message: '‚ùå Erreur lors de la demande de r√©initialisation', email, error });
      throw error;
    }
  }

  public async updateUserProfile(user: User, displayName: string): Promise<void> {
    try {
      logger.debug(LOG_CATEGORY, { message: 'üìù Mise √† jour du profil utilisateur', email: user.email });
      await updateProfile(user, { displayName });
      logger.info(LOG_CATEGORY, { message: '‚úÖ Profil utilisateur mis √† jour', email: user.email });
    } catch (error) {
      logger.error(LOG_CATEGORY, { message: '‚ùå Erreur lors de la mise √† jour du profil', email: user.email, error });
      throw error;
    }
  }

  public async updateUserPassword(user: User, newPassword: string): Promise<void> {
    try {
      logger.debug(LOG_CATEGORY, { message: 'üîí Mise √† jour du mot de passe', email: user.email });
      await updatePassword(user, newPassword);
      logger.info(LOG_CATEGORY, { message: '‚úÖ Mot de passe mis √† jour', email: user.email });
    } catch (error) {
      logger.error(LOG_CATEGORY, { message: '‚ùå Erreur lors de la mise √† jour du mot de passe', email: user.email, error });
      throw error;
    }
  }
}

// Export une instance unique
export const firebaseAuth = FirebaseAuth.getInstance();
