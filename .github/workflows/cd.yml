# This workflow handles continuous deployment for TokenForge
name: CD

on:
  push:
    branches: [main]
    tags:
      - "v*"

env:
  AWS_REGION: eu-west-1
  STAGING_API_URL: https://api-staging.tokenforge-app.com
  STAGING_BLOCKCHAIN_NETWORK: testnet
  STAGING_S3_BUCKET: tokenforge-staging
  STAGING_CLOUDFRONT_ID: E1ABCDEFGHIJKL
  PRODUCTION_API_URL: https://api.tokenforge.io
  PRODUCTION_BLOCKCHAIN_NETWORK: mainnet
  PRODUCTION_S3_BUCKET: tokenforge-production
  PRODUCTION_CLOUDFRONT_ID: E2ABCDEFGHIJKL

jobs:
  deploy-staging:
    name: Deploy to Staging
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    # Disable linting for this job
    env:
      # AWS credentials will be set by GitHub Actions
      DISABLE_LINTING: true
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build
        env:
          VITE_API_URL: ${{ env.STAGING_API_URL }}
          VITE_BLOCKCHAIN_NETWORK: ${{ env.STAGING_BLOCKCHAIN_NETWORK }}

      # Using a shell script approach instead of direct action
      - name: Setup deployment script
        run: |
          cat > deploy.sh << 'EOL'
          #!/bin/bash
          # Setup AWS credentials
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${AWS_ACCESS_KEY_ID}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}" >> ~/.aws/credentials
          echo "[default]" > ~/.aws/config
          echo "region=${AWS_REGION}" >> ~/.aws/config

          # Deploy to S3
          aws s3 sync dist/ s3://${S3_BUCKET} --delete

          # Invalidate CloudFront cache
          aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths "/*"

          # Notify via Slack if webhook is available
          if [ -n "${SLACK_WEBHOOK_URL}" ]; then
            curl -X POST -H "Content-Type: application/json" \
              -d "{\"text\":\"üöÄ ${ENV_NAME} deployment completed for TokenForge ${GITHUB_SHA}\"}" \
              "${SLACK_WEBHOOK_URL}"
          fi
          EOL
          chmod +x deploy.sh

      - name: Deploy to staging
        run: ./deploy.sh
        env:
          # These environment variables will be available to the script
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_BUCKET: ${{ env.STAGING_S3_BUCKET }}
          CLOUDFRONT_ID: ${{ env.STAGING_CLOUDFRONT_ID }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          ENV_NAME: "Staging"
          GITHUB_SHA: ${{ github.sha }}

  deploy-production:
    name: Deploy to Production
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    # Disable linting for this job
    env:
      # AWS credentials will be set by GitHub Actions
      DISABLE_LINTING: true
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build
        env:
          VITE_API_URL: ${{ env.PRODUCTION_API_URL }}
          VITE_BLOCKCHAIN_NETWORK: ${{ env.PRODUCTION_BLOCKCHAIN_NETWORK }}

      # Using a shell script approach instead of direct action
      - name: Setup deployment script
        run: |
          cat > deploy.sh << 'EOL'
          #!/bin/bash
          # Setup AWS credentials
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${AWS_ACCESS_KEY_ID}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}" >> ~/.aws/credentials
          echo "[default]" > ~/.aws/config
          echo "region=${AWS_REGION}" >> ~/.aws/config

          # Deploy to S3
          aws s3 sync dist/ s3://${S3_BUCKET} --delete

          # Invalidate CloudFront cache
          aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths "/*"

          # Notify via Slack if webhook is available
          if [ -n "${SLACK_WEBHOOK_URL}" ]; then
            curl -X POST -H "Content-Type: application/json" \
              -d "{\"text\":\"üéâ ${ENV_NAME} deployment completed for TokenForge ${GITHUB_REF_NAME}\"}" \
              "${SLACK_WEBHOOK_URL}"
          fi
          EOL
          chmod +x deploy.sh

      - name: Deploy to production
        run: ./deploy.sh
        env:
          # These environment variables will be available to the script
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_BUCKET: ${{ env.PRODUCTION_S3_BUCKET }}
          CLOUDFRONT_ID: ${{ env.PRODUCTION_CLOUDFRONT_ID }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          ENV_NAME: "Production"
          GITHUB_REF_NAME: ${{ github.ref_name }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/index.html
            dist/manifest.json
          body: |
            ## TokenForge ${{ github.ref_name }}

            ### üöÄ New Features
            - Feature 1
            - Feature 2

            ### üêõ Bug Fixes
            - Fix 1
            - Fix 2

            ### üìù Notes
            - Note 1
            - Note 2
